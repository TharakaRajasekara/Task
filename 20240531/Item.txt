Item


package com.example.demo.entity;

import javax.persistence.*;

@Entity
@Table(name = "item_list")
public class Item {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(nullable = false)
    private double pct;

    @Column(nullable = false)
    private double papers;

    @Column(nullable = false)
    private double gbottles;

    @Column(nullable = false)
    private int books;

    @Column(nullable = false)
    private int clothes;

    // Getters and Setters
    // ...

}



 ItemDTO

package com.example.demo.dto;

public class ItemDTO {

    private int id;
    private double pct;
    private double papers;
    private double gbottles;
    private int books;
    private int clothes;

    // Getters and Setters
    // ...

}



ItemRepository


package com.example.demo.repository;

import com.example.demo.entity.Item;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ItemRepository extends JpaRepository<Item, Integer> {
}



ItemService 


package com.example.demo.service;

import com.example.demo.dto.ItemDTO;
import com.example.demo.entity.Item;
import com.example.demo.repository.ItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class ItemService {

    @Autowired
    private ItemRepository itemRepository;

    public List<ItemDTO> getAllItems() {
        return itemRepository.findAll().stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    public ItemDTO getItemById(int id) {
        return itemRepository.findById(id).map(this::convertToDTO).orElse(null);
    }

    public ItemDTO createItem(ItemDTO itemDTO) {
        Item item = convertToEntity(itemDTO);
        item = itemRepository.save(item);
        return convertToDTO(item);
    }

    public ItemDTO updateItem(int id, ItemDTO itemDTO) {
        if (itemRepository.existsById(id)) {
            Item item = convertToEntity(itemDTO);
            item.setId(id);
            item = itemRepository.save(item);
            return convertToDTO(item);
        }
        return null;
    }

    public void deleteItem(int id) {
        itemRepository.deleteById(id);
    }

    private ItemDTO convertToDTO(Item item) {
        ItemDTO itemDTO = new ItemDTO();
        itemDTO.setId(item.getId());
        itemDTO.setPct(item.getPct());
        itemDTO.setPapers(item.getPapers());
        itemDTO.setGbottles(item.getGbottles());
        itemDTO.setBooks(item.getBooks());
        itemDTO.setClothes(item.getClothes());
        return itemDTO;
    }

    private Item convertToEntity(ItemDTO itemDTO) {
        Item item = new Item();
        item.setPct(itemDTO.getPct());
        item.setPapers(itemDTO.getPapers());
        item.setGbottles(itemDTO.getGbottles());
        item.setBooks(itemDTO.getBooks());
        item.setClothes(itemDTO.getClothes());
        return item;
    }
}



ItemController


package com.example.demo.controller;

import com.example.demo.dto.ItemDTO;
import com.example.demo.service.ItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/items")
public class ItemController {

    @Autowired
    private ItemService itemService;

    @GetMapping
    public List<ItemDTO> getAllItems() {
        return itemService.getAllItems();
    }

    @GetMapping("/{id}")
    public ResponseEntity<ItemDTO> getItemById(@PathVariable int id) {
        ItemDTO item = itemService.getItemById(id);
        return item != null ? ResponseEntity.ok(item) : ResponseEntity.notFound().build();
    }

    @PostMapping
    public ResponseEntity<ItemDTO> createItem(@RequestBody ItemDTO itemDTO) {
        ItemDTO newItem = itemService.createItem(itemDTO);
        return ResponseEntity.ok(newItem);
    }

    @PutMapping("/{id}")
    public ResponseEntity<ItemDTO> updateItem(@PathVariable int id, @RequestBody ItemDTO itemDTO) {
        ItemDTO updatedItem = itemService.updateItem(id, itemDTO);
        return updatedItem != null ? ResponseEntity.ok(updatedItem) : ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteItem(@PathVariable int id) {
        itemService.deleteItem(id);
        return ResponseEntity.noContent().build();
    }
}
