Machine

package com.example.demo.entity;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Machine {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    private String location;

    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }
}




MachineDTO 



package com.example.demo.dto;

public class MachineDTO {

    private Integer id;
    private String location;

    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }
}



MachineRepository


package com.example.demo.repository;

import com.example.demo.entity.Machine;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MachineRepository extends JpaRepository<Machine, Integer> {
}




MachineService 


package com.example.demo.service;

import com.example.demo.dto.MachineDTO;
import com.example.demo.entity.Machine;
import com.example.demo.repository.MachineRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class MachineService {

    @Autowired
    private MachineRepository machineRepository;

    public List<MachineDTO> getAllMachines() {
        return machineRepository.findAll().stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    public MachineDTO getMachineById(Integer id) {
        return machineRepository.findById(id).map(this::convertToDTO).orElse(null);
    }

    public MachineDTO createMachine(MachineDTO machineDTO) {
        Machine machine = convertToEntity(machineDTO);
        machine = machineRepository.save(machine);
        return convertToDTO(machine);
    }

    public MachineDTO updateMachine(Integer id, MachineDTO machineDTO) {
        if (machineRepository.existsById(id)) {
            Machine machine = convertToEntity(machineDTO);
            machine.setId(id);
            machine = machineRepository.save(machine);
            return convertToDTO(machine);
        }
        return null;
    }

    public void deleteMachine(Integer id) {
        machineRepository.deleteById(id);
    }

    private MachineDTO convertToDTO(Machine machine) {
        MachineDTO machineDTO = new MachineDTO();
        machineDTO.setId(machine.getId());
        machineDTO.setLocation(machine.getLocation());
        return machineDTO;
    }

    private Machine convertToEntity(MachineDTO machineDTO) {
        Machine machine = new Machine();
        machine.setLocation(machineDTO.getLocation());
        return machine;
    }
}



MachineController



package com.example.demo.controller;

import com.example.demo.dto.MachineDTO;
import com.example.demo.service.MachineService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/machines")
public class MachineController {

    @Autowired
    private MachineService machineService;

    @GetMapping
    public List<MachineDTO> getAllMachines() {
        return machineService.getAllMachines();
    }

    @GetMapping("/{id}")
    public ResponseEntity<MachineDTO> getMachineById(@PathVariable Integer id) {
        MachineDTO machineDTO = machineService.getMachineById(id);
        if (machineDTO != null) {
            return ResponseEntity.ok(machineDTO);
        }
        return ResponseEntity.notFound().build();
    }

    @PostMapping
    public ResponseEntity<MachineDTO> createMachine(@RequestBody MachineDTO machineDTO) {
        MachineDTO createdMachine = machineService.createMachine(machineDTO);
        return ResponseEntity.ok(createdMachine);
    }

    @PutMapping("/{id}")
    public ResponseEntity<MachineDTO> updateMachine(@PathVariable Integer id, @RequestBody MachineDTO machineDTO) {
        MachineDTO updatedMachine = machineService.updateMachine(id, machineDTO);
        if (updatedMachine != null) {
            return ResponseEntity.ok(updatedMachine);
        }
        return ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteMachine(@PathVariable Integer id) {
        machineService.deleteMachine(id);
        return ResponseEntity.noContent().build();
    }
}


