Timeslot


package com.example.timeslot.entity;

import javax.persistence.*;
import java.time.LocalDate;
import java.time.LocalTime;

@Entity
@Table(name = "timeslot")
public class Timeslot {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(nullable = false)
    private LocalDate date;

    @Column(name = "from", nullable = false)
    private LocalTime from;

    @Column(name = "to", nullable = false)
    private LocalTime to;

    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public LocalTime getFrom() {
        return from;
    }

    public void setFrom(LocalTime from) {
        this.from = from;
    }

    public LocalTime getTo() {
        return to;
    }

    public void setTo(LocalTime to) {
        this.to = to;
    }
}





TimeslotDTO



package com.example.timeslot.dto;

import java.time.LocalDate;
import java.time.LocalTime;

public class TimeslotDTO {

    private Integer id;
    private LocalDate date;
    private LocalTime from;
    private LocalTime to;

    // Getters and Setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public LocalTime getFrom() {
        return from;
    }

    public void setFrom(LocalTime from) {
        this.from = from;
    }

    public LocalTime getTo() {
        return to;
    }

    public void setTo(LocalTime to) {
        this.to = to;
    }
}




TimeslotRepository 



package com.example.timeslot.repository;

import com.example.timeslot.entity.Timeslot;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TimeslotRepository extends JpaRepository<Timeslot, Integer> {
}



TimeslotService


package com.example.timeslot.service;

import com.example.timeslot.dto.TimeslotDTO;
import com.example.timeslot.entity.Timeslot;
import com.example.timeslot.repository.TimeslotRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class TimeslotService {

    @Autowired
    private TimeslotRepository timeslotRepository;

    public List<TimeslotDTO> getAllTimeslots() {
        return timeslotRepository.findAll().stream().map(this::convertToDTO).collect(Collectors.toList());
    }

    public TimeslotDTO getTimeslotById(Integer id) {
        Optional<Timeslot> timeslot = timeslotRepository.findById(id);
        return timeslot.map(this::convertToDTO).orElse(null);
    }

    public TimeslotDTO saveTimeslot(TimeslotDTO timeslotDTO) {
        Timeslot timeslot = convertToEntity(timeslotDTO);
        return convertToDTO(timeslotRepository.save(timeslot));
    }

    public void deleteTimeslot(Integer id) {
        timeslotRepository.deleteById(id);
    }

    private TimeslotDTO convertToDTO(Timeslot timeslot) {
        TimeslotDTO dto = new TimeslotDTO();
        dto.setId(timeslot.getId());
        dto.setDate(timeslot.getDate());
        dto.setFrom(timeslot.getFrom());
        dto.setTo(timeslot.getTo());
        return dto;
    }

    private Timeslot convertToEntity(TimeslotDTO dto) {
        Timeslot timeslot = new Timeslot();
        timeslot.setId(dto.getId());
        timeslot.setDate(dto.getDate());
        timeslot.setFrom(dto.getFrom());
        timeslot.setTo(dto.getTo());
        return timeslot;
    }
}



TimeslotController



package com.example.timeslot.controller;

import com.example.timeslot.dto.TimeslotDTO;
import com.example.timeslot.service.TimeslotService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/timeslots")
public class TimeslotController {

    @Autowired
    private TimeslotService timeslotService;

    @GetMapping
    public List<TimeslotDTO> getAllTimeslots() {
        return timeslotService.getAllTimeslots();
    }

    @GetMapping("/{id}")
    public ResponseEntity<TimeslotDTO> getTimeslotById(@PathVariable Integer id) {
        TimeslotDTO dto = timeslotService.getTimeslotById(id);
        if (dto != null) {
            return ResponseEntity.ok(dto);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping
    public TimeslotDTO createTimeslot(@RequestBody TimeslotDTO timeslotDTO) {
        return timeslotService.saveTimeslot(timeslotDTO);
    }

    @PutMapping("/{id}")
    public ResponseEntity<TimeslotDTO> updateTimeslot(@PathVariable Integer id, @RequestBody TimeslotDTO timeslotDTO) {
        if (timeslotService.getTimeslotById(id) != null) {
            timeslotDTO.setId(id);
            return ResponseEntity.ok(timeslotService.saveTimeslot(timeslotDTO));
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTimeslot(@PathVariable Integer id) {
        if (timeslotService.getTimeslotById(id) != null) {
            timeslotService.deleteTimeslot(id);
            return ResponseEntity.ok().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
